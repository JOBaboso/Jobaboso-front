export interface Mission {
  id: string;
  title: string;
  description: string;
  buttonText: string;
  icon: string;
  guide: string;
  question: string;
  content: string;
}

export interface MissionHistory {
  id: string;
  title: string;
  emoji: string;
  question: string;
  date: string;
  content: string;
  guide: string;
}

export const todayMission: Mission = {
  id: '1',
  title: '면접 답변 작성하기',
  description:
    '합격률을 한 단계 UP!\n잡메이트가 준비한 프론트엔드 면접 문항으로 실전 감각을 키워보세요.',
  buttonText: '지금 시작하기 →',
  icon: '/mission.svg',
  guide:
    'React, TypeScript, 성능 최적화, 웹 접근성 등 실제 면접에서 자주 묻는 질문에 답변을 작성해보세요. 경험을 코드와 함께 정리하면 더 설득력 있는 답변이 됩니다.',
  question: 'React 18의 주요 변경사항과 그 의미는 무엇인가요?',
  content: '자유롭게 답변을 작성해보세요!',
};

export const missionHistory: MissionHistory[] = [
  {
    id: '1',
    title: '면접 실패 복기 챌린지',
    emoji: '🤔',
    question: 'React 관련 질문에서 부족했던 점은 무엇인가요?',
    date: '2025. 8. 13.',
    content:
      'React 성능 최적화 관련 질문에서 useMemo와 useCallback의 적절한 활용 시점을 구체적으로 설명하지 못했습니다. 단순히 두 훅이 불필요한 렌더링을 줄여준다는 정도의 정의만 언급했고, 실제 프로젝트에서 어떤 상황에서 적용했는지에 대한 사례를 제시하지 못한 것이 아쉬웠습니다. 특히 복잡한 대시보드 프로젝트에서 렌더링 병목 현상을 해결했던 경험을 충분히 풀어내지 못해 설득력이 떨어졌다고 느꼈습니다.',
    guide:
      '실제 프로젝트에서 성능 최적화를 적용한 사례를 코드와 함께 정리해두면, 구체적이고 신뢰감 있는 답변이 가능합니다. 단순히 이론적 지식을 나열하는 것보다 "문제 → 접근 방식 → 코드 예시 → 개선된 결과" 순으로 구조화하여 설명하면 더욱 효과적입니다. 면접 준비 과정에서 과거 프로젝트 로그와 성능 모니터링 자료를 기반으로 스토리를 만들어두면 좋습니다.',
  },
  {
    id: '2',
    title: '1일 1 면접 답변 작성',
    emoji: '📝',
    question: 'Next.js와 CRA(Create React App)의 차이점을 설명하시오.',
    date: '2025. 8. 12.',
    content:
      'Next.js는 SSR(서버사이드 렌더링)과 SSG(정적 사이트 생성)을 지원하여 초기 로딩 속도가 빠르고 SEO에도 강점을 갖습니다. 반면 CRA는 CSR(Client-Side Rendering) 중심이기 때문에 검색 엔진 최적화와 첫 화면 표시 속도에서 상대적으로 불리합니다. 또한 Next.js는 이미지 최적화, API Routes, 파일 기반 라우팅 등 다양한 내장 기능을 제공하지만 CRA는 기본적인 빌드 환경만 제공하기 때문에 개발자가 직접 세팅을 더 많이 해야 하는 차이가 있습니다.',
    guide:
      '기술 비교형 질문에는 장단점을 단순 나열하는 것을 넘어서, 실제 프로젝트에서 어떤 선택을 했고 그 결과 어떤 장점을 얻었는지까지 포함하면 설득력이 높아집니다. 예를 들어 "블로그 서비스에서는 SEO가 중요하기 때문에 Next.js를 사용했다. 덕분에 검색 노출률이 개선되었고 트래픽이 늘어났다" 같은 경험을 답변에 추가하면 훨씬 강력한 답변이 됩니다.',
  },
  {
    id: '3',
    title: '3일 자소서 완성 챌린지',
    emoji: '✍️',
    question: '오늘은 어디까지 작성했나요?',
    date: '2025. 8. 11.',
    content:
      '오늘은 자소서에서 지원 동기와 입사 후 포부 부분을 집중적으로 작성했습니다. 지원 동기에서는 회사가 추진하는 디지털 전환 비전과 제가 쌓아온 프론트엔드 경험을 연결하여 진정성 있게 표현했습니다. 예를 들어 React와 Next.js를 활용한 프로젝트 경험을 바탕으로, 기업의 웹 서비스 혁신에 기여하고 싶다는 점을 강조했습니다. 입사 후 포부에서는 모바일 퍼포먼스 최적화, 웹 접근성 강화, UI/UX 혁신 등을 통해 회사가 추구하는 사용자 경험 향상에 기여하겠다는 구체적인 계획을 담았습니다.',
    guide:
      '자소서를 3일 동안 단계적으로 작성하면 체계적인 흐름을 만들 수 있습니다. 오늘 작성한 내용을 간결하게 요약하고, 내일 어떤 항목을 다룰지 미리 계획을 세워보세요. 예를 들어 1일 차에는 성장 과정, 2일 차에는 지원 동기, 3일 차에는 입사 후 포부를 작성하는 식으로 나누면 부담이 줄어듭니다. 작성한 후에는 꼭 피드백을 받아 문장의 설득력을 강화하세요.',
  },
  {
    id: '4',
    title: '직군별 뉴스 요약 챌린지',
    emoji: '📰',
    question: '오늘 읽은 프론트엔드 뉴스는?',
    date: '2025. 8. 10.',
    content:
      'React 19 프리뷰 기능 발표 소식을 읽었습니다. 특히 Server Actions와 React Compiler 도입이 큰 화제가 되고 있었는데, 이 기능들은 데이터 페칭과 렌더링 방식을 혁신적으로 개선할 수 있는 가능성을 보여주었습니다. 기존 CSR, SSR, SSG의 한계를 보완할 수 있는 방향으로 React 팀이 움직이고 있다는 점에서 매우 인상 깊었습니다. 또한 많은 글로벌 기업들이 이 기능을 실험적으로 도입하고 있다는 점을 보면서, 곧 현업에서도 빠르게 적용될 가능성이 크다고 생각했습니다.',
    guide:
      '뉴스를 단순 요약하는 것에서 끝내지 말고, 해당 기술이 실제 업무나 프로젝트에 어떤 영향을 미칠지 연결해보세요. 예를 들어 "Server Actions를 사용하면 데이터 요청과 상태 관리 로직을 단순화할 수 있어 코드 유지보수가 훨씬 쉬워질 것이다" 같은 관점을 답변에 포함하면 전문성을 어필할 수 있습니다.',
  },
  {
    id: '5',
    title: '지역 기업 퀴즈 챌린지',
    emoji: '🏢',
    question: '부산 B기업에서 사용하는 주요 프론트엔드 프레임워크는?',
    date: '2025. 8. 9.',
    content:
      '해당 기업은 React와 Next.js 기반으로 웹 서비스를 운영하고 있었습니다. 특히 커머스 서비스에 Next.js를 활용해 초기 로딩 속도를 개선하고, SEO 최적화를 강화하는 방식으로 트래픽을 확보하고 있다는 점이 인상적이었습니다. 또한 사내 개발팀은 React Query와 Zustand 같은 상태 관리 라이브러리를 병행해 사용하며, 성능 최적화와 개발 효율성을 동시에 추구하고 있었습니다.',
    guide:
      '기업의 기술 스택과 문화는 면접에서 자주 묻는 영역입니다. 단순히 사용하는 프레임워크 이름을 아는 것에 그치지 말고, 왜 해당 기업이 그 기술을 선택했는지까지 분석해보세요. 이렇게 정리하면 면접에서 "우리 회사 기술 스택을 어떻게 보나요?"라는 질문에 깊이 있는 답변을 할 수 있습니다.',
  },
  {
    id: '6',
    title: '자소서 특훈',
    emoji: '🚀',
    question: '5년 후 프론트엔드 개발자로서의 모습은?',
    date: '2025. 8. 8.',
    content:
      '5년 후에는 프론트엔드 아키텍트로 성장하여 대규모 서비스의 UI/UX 아키텍처를 설계하고 싶습니다. 단순히 화면을 만드는 것을 넘어, 성능 최적화와 접근성 표준을 동시에 고려하는 전문가로 발전하는 것이 목표입니다. 또한 글로벌 서비스 경험을 통해 사용자 데이터 기반 의사결정을 내리고, 디자인 시스템을 구축하여 대규모 팀에서도 일관된 UI 개발이 가능하도록 기여하고 싶습니다.',
    guide:
      '장기적 성장 목표는 추상적인 비전보다는 구체적인 기술 스택과 역할을 중심으로 설정하세요. 예를 들어 "5년 후에는 Next.js 기반 SSR 아키텍처를 설계하고, 성능 최적화 프로세스를 표준화하는 프론트엔드 아키텍트가 되고 싶습니다"처럼 기술적 키워드를 포함하면 설득력이 강화됩니다.',
  },
  {
    id: '7',
    title: '면접 실패 복기',
    emoji: '📉',
    question: 'CSS 관련 질문에서 부족했던 점은 무엇인가요?',
    date: '2025. 8. 7.',
    content:
      'CSS Grid와 Flexbox 차이를 설명하는 질문에서 단순히 "Grid는 2차원, Flex는 1차원 레이아웃"이라는 기본적인 정의만 언급했습니다. 정작 실무에서 Grid를 활용하여 반응형 대시보드를 구현했던 경험이나, Flexbox로 정렬 문제를 해결했던 사례를 구체적으로 설명하지 못한 것이 큰 아쉬움으로 남았습니다.',
    guide:
      'CSS 관련 질문은 실무 사례와 함께 설명할 때 설득력이 커집니다. 단순히 속성 정의를 나열하는 대신, "Grid를 사용하여 카드형 UI를 구현했고, 브라우저 호환성을 고려해 특정 속성을 대체했다"와 같이 구체적인 경험을 덧붙여 준비해보세요.',
  },
  {
    id: '8',
    title: '1일 1 답변',
    emoji: '🗣️',
    question: '팀 협업 중 API 스펙 충돌을 어떻게 해결했나요?',
    date: '2025. 8. 6.',
    content:
      '프론트엔드와 백엔드 간 API 응답 형식이 맞지 않아 개발 일정이 지연될 위기가 있었습니다. 이를 해결하기 위해 Swagger 기반 문서를 작성하고, 실제 데이터 예시를 넣어 양쪽 팀이 공통된 규약을 확립했습니다. 이후 API Mock Server를 운영하여 프론트엔드 개발이 백엔드 완성 여부와 관계없이 진행될 수 있도록 만들었습니다.',
    guide:
      '협업 경험을 설명할 때는 문제-해결 과정을 STAR 기법으로 풀어내면 효과적입니다. 단순히 "API 충돌을 해결했다"가 아니라, 구체적으로 어떤 갈등이 있었고, 어떤 방식으로 합의했으며, 결과적으로 팀에 어떤 긍정적인 영향이 있었는지를 덧붙이세요.',
  },
  {
    id: '9',
    title: '3일 자소서 챌린지',
    emoji: '📝',
    question: '성장 과정을 작성해보세요.',
    date: '2025. 8. 5.',
    content:
      '대학 시절 React 기반 사이드 프로젝트를 통해 상태 관리와 컴포넌트 설계 역량을 키웠습니다. 특히 Redux와 Context API를 비교하면서 상태 관리 전략을 직접 선택했던 경험이 큰 자산이 되었습니다. 또한 협업 과정에서 코드 리뷰 문화를 경험하면서 협업 능력과 코드 품질 개선에 대한 태도를 기르게 되었습니다.',
    guide:
      '성장 과정에는 단순히 어떤 언어와 기술을 배웠는지보다, 어떤 과정을 통해 태도와 역량이 발전했는지를 담아야 합니다. "React 상태 관리 실험을 통해 문제 해결 능력을 키웠다", "코드 리뷰 경험을 통해 협업과 소통 역량이 향상되었다"와 같은 메시지를 녹여내면 더욱 매력적인 성장 스토리가 됩니다.',
  },
  {
    id: '10',
    title: '직군별 뉴스 요약',
    emoji: '🌐',
    question: '오늘의 프론트엔드 업계 핵심 뉴스는?',
    date: '2025. 8. 4.',
    content:
      'Vercel이 Next.js 15 베타 버전을 공개했습니다. 이번 업데이트에서 도입된 새로운 Routing 시스템과 Edge Functions 통합 기능은 개발자 경험과 서비스 성능 모두를 크게 개선할 가능성이 있습니다. 특히 Edge Functions는 글로벌 사용자를 대상으로 하는 서비스에서 지연 시간을 줄여주기 때문에, 앞으로 많은 기업들이 주목할 만한 요소라고 생각됩니다.',
    guide:
      '최신 기술 동향을 요약한 뒤, 그 기술이 프로젝트에 어떤 식으로 활용될 수 있을지 한두 문장이라도 추가해보세요. 예를 들어 "Edge Functions는 다국적 사용자 대상 서비스에서 속도 개선에 큰 도움이 될 것이다" 같은 분석을 덧붙이면 차별화된 답변이 됩니다.',
  },
];
